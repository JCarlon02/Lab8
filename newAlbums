-- LAB 7 --
use cbonk;
show tables;
select * from Album;
select * from AlbumSong;
select * from Band;
select * from Song;
select * from Musician;
select * from BandMember;

-- 1
select * from Album;
-- 2
select * from Album a
	order by a.year desc;
-- 3
select * from Album a
	where a.title like "The%";
-- 4
select * from Album a
	order by title asc;
-- 5
select albumId from Album a
	where a.title = "Nevermind";
-- 6
select count(*) from Musician;
-- 7
select * from Album a
	where year = (select min(year) from Album);

-- 8
select sum(s.trackLength) as totalRunningTime from AlbumSong s
	left join Album a on
		s.albumId = a.albumId
    where a.title = "Rain Dogs";

-- 9
select a.title albumTitle, a.year yearReleased, b.name bandName from Album a
	left join Band b on
		a.bandId = b.bandId;
	
-- 10
select a.title albumTitle, s.title songTitle from Band b
	left join Album a on
		b.bandId = a.bandId
	left join AlbumSong als on
		a.albumId = als.albumId
	left join Song s on
		als.songId = s.songId
	where b.name = "Nirvana";
    
-- 11
select b.name, a.title from Band b
	left join Album a on
		b.bandId = a.bandId;
            
	-- 12
	select b.name, count(a.albumId) numberOfAlbums from Band b
		left join Album a on
			b.bandId = a.bandId
		group by 1;
 
 -- 13
select a.title, count(s.trackNumber) numberOfTracks from Album a
	left join AlbumSong s on
		a.albumId = s.albumId
	group by 1;
    
-- 14
select a.title, count(s.trackNumber) numOfTracks from Album a
	left join AlbumSong s on
		a.albumId = s.albumId
	group by 1
		having numOfTracks > 12;
        
-- 15
select m.firstName, m.lastName from Musician m
	left join BandMember bm on
		m.musicianId = bm.musicianId
	where bm.bandId is null;
    
-- 16
select m.firstName, m.lastName, count(bm.bandId) numberOfBandsIn from Musician m
	join BandMember bm on
		m.musicianId = bm.musicianId
	group by m.musicianId
		having count(bm.bandId) > 1;
        
        
-- LAB 8 --
-- Inserting & Manipulating Data
-- 1
-- a
insert into Band values (5, "Billie Eilish");
-- b
insert into Album values (50, "Don't Smile At Me", 2017, 1, 5);
-- c
insert into Song values (1000, "COPYCAT");
insert into Song values (1001, "idontwannabeyouanymore");
-- d
insert into AlbumSong values (876, 1, 193, 50, 1000);
insert into AlbumSong Values (877, 2, 174, 50, 1001);

-- 2
update Musician
	set firstName = "Pete"
    where musicianId = 1005;
    
-- 3
delete from BandMember
	where bandMemberId = 32;
    
-- 4
delete from AlbumSong
	where albumSongId = 68;
delete from Song
	where songId = 71;
    
-- Create the New Tables

drop table if exists Concert;
drop table if exists ConcertSong;
drop table if exists ConcertHall;


select * from Concert;
select * from ConcertHall;
select * from ConcertSong;


create table if not exists Concert(
concertId int primary key not null auto_increment,
bandId int not null,
foreign key(bandId) references Band(bandId),
dateOfConcert varchar(255) not null default "0000-00-00",
concertHallId int not null,
foreign key(concertHallId) references ConcertHall(concertHallId),
numTickets int not null default 0
);

create table if not exists ConcertSong(
concertSongId int primary key not null auto_increment,
songId int not null,
foreign key(songId) references Song(songId),
concertId int not null,
foreign key(concertId) references Concert(concertId)
);

create table if not exists ConcertHall(
concertHallId int primary key not null auto_increment,
hallName varchar(255) not null,
maxComp int not null
);

-- Using the New Tables
-- 1
insert into ConcertHall values (1, "Carnegie Hall", 3671), (2, "Orpheum Thearte", 2805);
insert into Concert values (1, 1301, "2020-03-04", 1, 3671), (2, 4, "2021-11-14", 2, 2800);
-- 2
insert into ConcertSong values (1, 1315, 1), (2, 1328, 1), (3, 1337, 1);
insert into ConcertSong values (4, 89, 2), (5, 108, 2), (6, 117, 2);
-- 3
select s.title Playlist from ConcertSong cs
	join Song s on
		cs.songId = s.songId
	where cs.concertId= 1;
select s.title Playlist from ConcertSong cs
	join Song s on
		cs.songId = s.songId
	where cs.concertId= 2;
-- 4
select b.name BandPlaying, s.title Playlist from ConcertSong cs
	join Song s on
		cs.songId = s.songId
	join Concert c on
		cs.concertId = c.concertId
	join Band b on
		c.bandId = b.bandId
	where cs.concertId= 1;
    
select b.name BandPlaying, s.title Playlist from ConcertSong cs
	join Song s on
		cs.songId = s.songId
	join Concert c on
		cs.concertId = c.concertId
	join Band b on
		c.bandId = b.bandId
	where cs.concertId= 2;
    
    select b.name BandPlaying, s.title Playlist from ConcertSong cs
	join Song s on
		cs.songId = s.songId
	join Concert c on
		cs.concertId = c.concertId
	join Band b on
		c.bandId = b.bandId
	;
